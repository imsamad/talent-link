generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model VerificationToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  token String

  // this key identifier instead of userId is taken for the conformity reasons with PrismaAdapters.
  identifier String   @unique @db.ObjectId
  user       User     @relation(fields: [identifier], references: [id])
  createdAt  DateTime @default(now())
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  email       String  @unique
  phoneNumber Int?
  password    String
  username    String
  name        String?
  image       String?
  cohortId    String?

  emailVerified       DateTime?
  phoneNumberVerified DateTime?

  isBlocked Boolean @default(false)
  isAdmin   Boolean @default(false)

  profile         Profile?
  confirmationOTP VerificationToken?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  jobs Job[]

}

model Profile {
  // userId String @unique @db.ObjectId

  // as the user authorised, profile entrt would be created immediately with id = user.id 
  // no extra userId field would be used, as User and Profile would have 1:1 mapping
  user   User   @relation(fields: [id], references: [id])

  id                      String                 @id @default(auto()) @map("_id") @db.ObjectId
  intro                   String?
  socialLinks             String[]
  videoResume             String?
  resumeLink             String?
  gender                  Gender_Enum?
  dateOfBirth             DateTime?
  currentCTC              Int?
  expectedCTC             TSalaryBracket? // null would be interpreted as negotiable
  currentEmploymentStatus EmploymentStatus_Enum?
  joiningStatus           JOINING_STATUS_Enum?
  workMode                WORK_MODE_Enum?

  address Address?

  experiences   Experience[]
  projects      Project[]
  educations    Education[]
  preferredLocation Address? // enum-ised cities
  skillIds      String[]      @db.ObjectId
  skills        Skill[]       @relation(fields: [skillIds], references: [id])
  testimonials  Testimonial[]
  invitaion Invitation[]
  applications Application[]
}

enum EmploymentStatus_Enum {
  ACTIVELY_LOOKING
  EMPLOYED
}

enum Gender_Enum {
  MALE
  FEMALE
}

model Education {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  institute TInstitute

  duration TDateRange

  course String

  backLogPending Boolean @default(false)

  // TODO: validate if cgpa is filled then percentage is not required, vice-versa
  cgpa       String?
  percentage String?

  profileId String  @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id])
}

type TDateRange {
  start DateTime
  end   DateTime?
}

type TInstitute {
  name String
  url  String?
}

model Project {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  sourceCodeLink String?
  name           String
  liveLink       String?
  otherLinks     String[]

  skillIds String[] @db.ObjectId
  skills   Skill[]  @relation(fields: [skillIds], references: [id])

  images      String[]
  videos      String[]
  description String?
  duration    TDateRange?

  profileId String  @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id])
}

model Experience {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  organisation TOrganisation
  role         String
  duration     TDateRange
  description  String

  skillIds String[] @db.ObjectId
  skills   Skill[]  @relation(fields: [skillIds], references: [id])

  profileId String  @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id])
}

type TOrganisation {
  name String
  url  String?
}

enum JOINING_STATUS_Enum {
  IMMEDIATE
  WITHIN_2_WEEKS
  FROM_2_TO_4_WEEKS
  FROM_4_TO_8_WEEKS
  MORE_THAN_8_WEEKS
}

model Testimonial {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  image       String?
  quote       String
  socialLinks String[]
  designation String

  profileId String  @db.ObjectId
  profiles  Profile @relation(fields: [profileId], references: [id])
}

type Address {
  city      String?
  state     String?
  country   String?
  // pincode   String?
  // longitude String?
  // latitude  String?
}

model Job {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  designation String

  mode    WORK_MODE_Enum
  address Address?

  experienceRequired TExperienceRequirement

  fresherApplicable Boolean?

  salary            TSalaryBracket?
  salaryNegotialble Boolean         @default(false)

  description String

  // skills required
  skillIds String[] @db.ObjectId
  skills   Skill[]  @relation(fields: [skillIds], references: [id])

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  noOfVacancies Int

  applications Application[]

 
  createdAt DateTime @default(now())

  closedAt DateTime?
  
  invitations Invitation[]
}

model Application {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  jobId String @db.ObjectId
  job   Job    @relation(fields: [jobId], references: [id])

  resumeLink String?
  message    String
  status     ApplicationStatus_Enum @default(PENDING)

  createdAt  DateTime  @default(now())
  approvedAt DateTime?

  profileId String  @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id])



  @@unique([profileId, jobId])
}

enum ApplicationStatus_Enum {
  PENDING
  ACCEPTED_FOR_INTERVIEW
  HIRED
  REJECTED
}

type TExperienceRequirement {
  min Int
  max Int
}

type TSalaryBracket {
  min Int
  max Int
}

model Invitation {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
   
  profile Profile @relation(fields: [id],references: [id])

  jobIds String[] @db.ObjectId
  jobs Job @relation(fields: [jobIds], references: [id])
}

model Skill {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  // skills user posses
  profileIds String[]  @db.ObjectId
  profile    Profile[] @relation(fields: [profileIds], references: [id])

  // skills requried in job
  jobIds String[] @db.ObjectId
  job    Job[]    @relation(fields: [jobIds], references: [id])

  // skills used in any project
  projectIds String[]  @db.ObjectId
  project    Project[] @relation(fields: [projectIds], references: [id])

  // skills worked during employment
  experienceIds String[]     @db.ObjectId
  experience    Experience[] @relation(fields: [experienceIds], references: [id])
}

enum ROLE_Enum {
  APPLICANT
  RECRUITER
}

enum WORK_MODE_Enum {
  WFH
  REMOTE
  HYBRID
}

enum CurrencyCode_Enum {
  USD
  INR
}
